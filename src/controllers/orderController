const { loadOrdersFromFile, findById } = require("../services/orderService");
const { formatOrderToCSVRow } = require("../utlis/formatOrder");

getAll = async (req, res) => {
  try {
    const orders = await loadOrdersFromFile();
    let { minWorth, maxWorth } = req.query;

    if (minWorth && isNaN(minWorth)) {
      return res.status(400).json({
        success: false,
        message: "minWorth must be a valid number",
      });
    }

    if (maxWorth && isNaN(maxWorth)) {
      return res.status(400).json({
        success: false,
        message: "maxWorth must be a valid number",
      });
    }

    minWorth = minWorth ? parseFloat(minWorth) : null;
    maxWorth = maxWorth ? parseFloat(maxWorth) : null;

    if (minWorth !== null && minWorth < 0) {
      return res.status(400).json({
        success: false,
        message: "minWorth cannot be negative",
      });
    }

    if (maxWorth !== null && maxWorth < 0) {
      return res.status(400).json({
        success: false,
        message: "maxWorth cannot be negative",
      });
    }

    if (minWorth !== null && maxWorth !== null && minWorth > maxWorth) {
      return res.status(400).json({
        success: false,
        message: "minWorth cannot be greater than maxWorth",
      });
    }

    const filteredOrders = orders.filter((order) => {
      if (minWorth && order.orderWorth < parseFloat(minWorth)) return false;
      if (maxWorth && order.orderWorth > parseFloat(maxWorth)) return false;

      return true;
    });

    let csv = "";
    if (filteredOrders.length > 0) {
      const headers = Object.keys(filteredOrders[0]);
      csv += headers.join(",") + "\n";

      filteredOrders.forEach((order) => {
        csv += formatOrderToCSVRow(order, headers) + "\n";
      });
    }

    res.setHeader("Content-Type", "text/csv");
    res.setHeader("Content-Disposition", "attachment; filename=orders.csv");
    res.send(csv);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Failed to get orders",
      error: error.message,
    });
  }
};

get = async (req, res) => {
  const { id } = req.params;
  try {
    const order = await findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Couldn't find order",
      });
    }
    res.status(200).json(order);
  } catch (err) {
    res.status(500).json({
      success: false,
      message: "Failed to get order",
      error: error.message,
    });
  }
};

module.exports = {
  getAll,
  get,
};
